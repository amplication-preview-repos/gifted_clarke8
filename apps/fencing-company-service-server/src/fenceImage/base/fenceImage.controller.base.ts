/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FenceImageService } from "../fenceImage.service";
import { FenceImageCreateInput } from "./FenceImageCreateInput";
import { FenceImage } from "./FenceImage";
import { FenceImageFindManyArgs } from "./FenceImageFindManyArgs";
import { FenceImageWhereUniqueInput } from "./FenceImageWhereUniqueInput";
import { FenceImageUpdateInput } from "./FenceImageUpdateInput";

export class FenceImageControllerBase {
  constructor(protected readonly service: FenceImageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FenceImage })
  async createFenceImage(
    @common.Body() data: FenceImageCreateInput
  ): Promise<FenceImage> {
    return await this.service.createFenceImage({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        imageUrl: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FenceImage] })
  @ApiNestedQuery(FenceImageFindManyArgs)
  async fenceImages(@common.Req() request: Request): Promise<FenceImage[]> {
    const args = plainToClass(FenceImageFindManyArgs, request.query);
    return this.service.fenceImages({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        imageUrl: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FenceImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fenceImage(
    @common.Param() params: FenceImageWhereUniqueInput
  ): Promise<FenceImage | null> {
    const result = await this.service.fenceImage({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        imageUrl: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FenceImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFenceImage(
    @common.Param() params: FenceImageWhereUniqueInput,
    @common.Body() data: FenceImageUpdateInput
  ): Promise<FenceImage | null> {
    try {
      return await this.service.updateFenceImage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          imageUrl: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FenceImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFenceImage(
    @common.Param() params: FenceImageWhereUniqueInput
  ): Promise<FenceImage | null> {
    try {
      return await this.service.deleteFenceImage({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          imageUrl: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
