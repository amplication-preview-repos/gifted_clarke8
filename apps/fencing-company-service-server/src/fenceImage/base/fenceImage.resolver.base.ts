/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FenceImage } from "./FenceImage";
import { FenceImageCountArgs } from "./FenceImageCountArgs";
import { FenceImageFindManyArgs } from "./FenceImageFindManyArgs";
import { FenceImageFindUniqueArgs } from "./FenceImageFindUniqueArgs";
import { CreateFenceImageArgs } from "./CreateFenceImageArgs";
import { UpdateFenceImageArgs } from "./UpdateFenceImageArgs";
import { DeleteFenceImageArgs } from "./DeleteFenceImageArgs";
import { FenceImageService } from "../fenceImage.service";
@graphql.Resolver(() => FenceImage)
export class FenceImageResolverBase {
  constructor(protected readonly service: FenceImageService) {}

  async _fenceImagesMeta(
    @graphql.Args() args: FenceImageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FenceImage])
  async fenceImages(
    @graphql.Args() args: FenceImageFindManyArgs
  ): Promise<FenceImage[]> {
    return this.service.fenceImages(args);
  }

  @graphql.Query(() => FenceImage, { nullable: true })
  async fenceImage(
    @graphql.Args() args: FenceImageFindUniqueArgs
  ): Promise<FenceImage | null> {
    const result = await this.service.fenceImage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FenceImage)
  async createFenceImage(
    @graphql.Args() args: CreateFenceImageArgs
  ): Promise<FenceImage> {
    return await this.service.createFenceImage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FenceImage)
  async updateFenceImage(
    @graphql.Args() args: UpdateFenceImageArgs
  ): Promise<FenceImage | null> {
    try {
      return await this.service.updateFenceImage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FenceImage)
  async deleteFenceImage(
    @graphql.Args() args: DeleteFenceImageArgs
  ): Promise<FenceImage | null> {
    try {
      return await this.service.deleteFenceImage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
