/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FenceImage as PrismaFenceImage } from "@prisma/client";

export class FenceImageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FenceImageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fenceImage.count(args);
  }

  async fenceImages<T extends Prisma.FenceImageFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FenceImageFindManyArgs>
  ): Promise<PrismaFenceImage[]> {
    return this.prisma.fenceImage.findMany<Prisma.FenceImageFindManyArgs>(args);
  }
  async fenceImage<T extends Prisma.FenceImageFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FenceImageFindUniqueArgs>
  ): Promise<PrismaFenceImage | null> {
    return this.prisma.fenceImage.findUnique(args);
  }
  async createFenceImage<T extends Prisma.FenceImageCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FenceImageCreateArgs>
  ): Promise<PrismaFenceImage> {
    return this.prisma.fenceImage.create<T>(args);
  }
  async updateFenceImage<T extends Prisma.FenceImageUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FenceImageUpdateArgs>
  ): Promise<PrismaFenceImage> {
    return this.prisma.fenceImage.update<T>(args);
  }
  async deleteFenceImage<T extends Prisma.FenceImageDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FenceImageDeleteArgs>
  ): Promise<PrismaFenceImage> {
    return this.prisma.fenceImage.delete(args);
  }
}
