/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InquiryService } from "../inquiry.service";
import { InquiryCreateInput } from "./InquiryCreateInput";
import { Inquiry } from "./Inquiry";
import { InquiryFindManyArgs } from "./InquiryFindManyArgs";
import { InquiryWhereUniqueInput } from "./InquiryWhereUniqueInput";
import { InquiryUpdateInput } from "./InquiryUpdateInput";

export class InquiryControllerBase {
  constructor(protected readonly service: InquiryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Inquiry })
  async createInquiry(
    @common.Body() data: InquiryCreateInput
  ): Promise<Inquiry> {
    return await this.service.createInquiry({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        message: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Inquiry] })
  @ApiNestedQuery(InquiryFindManyArgs)
  async inquiries(@common.Req() request: Request): Promise<Inquiry[]> {
    const args = plainToClass(InquiryFindManyArgs, request.query);
    return this.service.inquiries({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        message: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Inquiry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async inquiry(
    @common.Param() params: InquiryWhereUniqueInput
  ): Promise<Inquiry | null> {
    const result = await this.service.inquiry({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        message: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Inquiry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInquiry(
    @common.Param() params: InquiryWhereUniqueInput,
    @common.Body() data: InquiryUpdateInput
  ): Promise<Inquiry | null> {
    try {
      return await this.service.updateInquiry({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          message: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Inquiry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInquiry(
    @common.Param() params: InquiryWhereUniqueInput
  ): Promise<Inquiry | null> {
    try {
      return await this.service.deleteInquiry({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          message: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
